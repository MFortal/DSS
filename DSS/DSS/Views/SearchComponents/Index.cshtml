@model  DSS.ViewModels.SearchFilterViewModel

@{
    ViewBag.Title = "Поиск компонентов";
}

<style>
    /*Стили для формы поиска*/
    .flex, .flexButtons {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
        padding: 5px;
    }

    .flex-itm {
        border: 1px solid gray;
        border-radius: 10px 0 0 10px;
        height: 200px;
        width: auto;
        overflow-y: scroll; /* прокрутка по вертикали */
        margin: 5px;
        padding: 15px;
    }

    .flex-btn {
        margin: 5px;
    }

    .nameProperty {
        font-size: 16px;
        text-align: center;
    }

    sup {
        cursor: help;
    }

    table {
        margin-top: 50px;
    }

    .component {
        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        font-size: 16px;
    }

    /*DropDownLists*/
    /* Style The Dropdown Button */
    .dropbtn {
        padding: 16px;
        font-size: 16px;
        cursor: pointer;
        display: block;
    }

    /* The container <div> - needed to position the dropdown content */
    .dropdown {
        position: relative;
        display: inline-block;
    }

    /* Dropdown Content (Hidden by Default) */
    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        min-width: 160px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
    }

        /* Links inside the dropdown */
        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }

            .dropdown-content a:hover {
                background-color: antiquewhite;
            }
    /* Show the dropdown menu on hover */
    .dropdown:hover .dropdown-content {
        display: block;
    }

    .notFound {
        font-size: 14px;
        color: darkgray;
    }
</style>

<h3>Поиск компонентов</h3>

<div class="dropdown">
    <div class="dropbtn">
        @Model.DropDown.ThisCategory.Name
    </div>
    <div class="dropdown-content">
        @foreach (var category in Model.DropDown.OtherCategories)
        {
            <a href="@Url.Action("Index", "SearchComponents", new { categoryId = category.Id })">
                @category.Name
            </a>
        }
    </div>
</div>
<div class="dropdown">>></div>
<div class="dropdown">
    <div class="dropbtn">
        @Model.DropDown.ThisSubcategory.Name
    </div>
    <div class="dropdown-content">
        @foreach (var subcategory in Model.DropDown.OtherSubcategories)
        {
            <a href="@Url.Action("Index", "SearchComponents", new { categoryId = ViewBag.categoryId, subcategoryId = subcategory.Id })">
                @subcategory.Name
            </a>
        }
    </div>
</div>

@using (Ajax.BeginForm("ShowResult", "SearchComponents", new AjaxOptions { UpdateTargetId = "results"}))
{
    @Html.HiddenFor(m => m.DropDown.ThisSubcategory.Id)
    <div class="flex">
        <div class="flex-itm">
            <p class="nameProperty">
                @Html.HiddenFor(m => m.CountryProperty.PropertyName)
                @Html.Label(Model.CountryProperty.PropertyName)
                @if (Model.CountryProperty.Description != null)
                {
                    <sup>
                        <img src="../../Image/Blobs/question.png"
                             width="15px" height="15px" title="@Model.CountryProperty.Description" />
                    </sup>
                }
            </p>
            @for (var i = 0; i < Model.CountryProperty.ValueChecked.Length; i++)
            {
                var value = Model.CountryProperty.ValueChecked[i];
                <p>
                    @Html.CheckBoxFor(m => m.CountryProperty.ValueChecked[i].Checked, false)
                    @Html.LabelFor(m => m.CountryProperty.ValueChecked[i].Checked, value.Name)
                    @Html.HiddenFor(m => m.CountryProperty.ValueChecked[i].Id)
                </p>
            }
        </div>

        @for (var p = 0; p < Model.Properties.Length; p++)
        {
            <div class="flex-itm">
                <p class="nameProperty">
                    @Html.Label(Model.Properties[p].PropertyName)
                    @Html.HiddenFor(m => m.Properties[p].PropertyId)
                    @Html.HiddenFor(m => m.Properties[p].PropertyName)
                    @if (Model.Properties[p].Description != null)
                    {
                        <sup>
                            <img src="../../Image/Blobs/question.png"
                                 width="15px" height="15px" title="@Model.Properties[p].Description" />
                        </sup>
                    }
                </p>
                @for (var i = 0; i < Model.Properties[p].ValueChecked.Length; i++)
                {
                    var value = Model.Properties[p].ValueChecked[i];
                    <p>
                        @Html.CheckBoxFor(m => m.Properties[p].ValueChecked[i].Checked, false)
                        @Html.LabelFor(m => m.Properties[p].ValueChecked[i].Checked, value.Name)
                        @Html.HiddenFor(m => m.Properties[p].ValueChecked[i].Id)
                    </p>
                }
            </div>
        }
    </div>
    <div class="flexButtons">
        <input class="btn btn-success flex-btn" type="submit" value="Искать" />
        <input class="btn btn-default flex-btn" type="reset" value="Сбросить" />
    </div>

}
<table class="table" id="results"></table>

@Scripts.Render("~/scripts/jquery-3.3.1.js")
@Scripts.Render("~/scripts/jquery.unobtrusive-ajax.js")